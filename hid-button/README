linux输入子系统之按键驱动
原创 2014年01月01日 15:51:52

上一节中，我们讲解了Linux  input子系统的框架，到内核源码里详细分析了输入子系统的分离分层的框架等。

上一节文章链接：http://blog.csdn.net/lwj103862095/article/details/17733993

这一节，我们来以输入子系统的框架来写一个按键驱动。

问：怎么写符合输入子系统框架的驱动程序？

答：
1. 分配一个input_dev结构体
2. 设置
3. 注册
4. 硬件相关的代码，比如在中断服务程序里上报事件

问：如何分配input_dev结构体？

答：使用input_allocate_device函数

input_dev结构体的重要成员

[cpp] view plain copy

    struct input_dev {  
        const char *name;  
        const char *phys;  
        const char *uniq;  
        struct input_id id;  
      
        unsigned long evbit[NBITS(EV_MAX)];   // 表示能产生哪类事件  
        unsigned long keybit[NBITS(KEY_MAX)]; // 表示能产生哪些按键  
        unsigned long relbit[NBITS(REL_MAX)]; // 表示能产生哪些相对位移事件, x,y,滚轮  
        unsigned long absbit[NBITS(ABS_MAX)]; // 表示能产生哪些绝对位移事件, x,y  
        unsigned long mscbit[BITS_TO_LONGS(MSC_CNT)];  
        unsigned long ledbit[BITS_TO_LONGS(LED_CNT)];  
        unsigned long sndbit[BITS_TO_LONGS(SND_CNT)];  
        unsigned long ffbit[BITS_TO_LONGS(FF_CNT)];  
        ...  
    }  

问：第二步的设置，应该怎么设置，应该设置什么？

答：举例，在此按键驱动里



[cpp] view plain copy

    /* 2.设置 */  
    /* 2.1 设置按键能产生哪类事件 */  
    set_bit(EV_KEY,buttons_dev->evbit);  
    set_bit(EV_REP,buttons_dev->evbit);  
      
    /* 2.2 设置能产生这类操作的哪些事件 */  
    set_bit(KEY_L,buttons_dev->keybit);  
    set_bit(KEY_S,buttons_dev->keybit);  
    set_bit(KEY_ENTER,buttons_dev->keybit);  
    set_bit(KEY_LEFTSHIFT,buttons_dev->keybit);  

问：有哪些类呢？

答：在input.h里有以下类

[cpp] view plain copy

    #define EV_SYN          0x00    //同步类  
    #define EV_KEY          0x01    //按键类  
    #define EV_REL          0x02    //相对位移类  
    #define EV_ABS          0x03    //绝对位移类  
    #define EV_MSC          0x04      
    #define EV_SW           0x05  
    #define EV_LED          0x11  
    #define EV_SND          0x12    //声音类  
    #define EV_REP          0x14    //重复类  
    #define EV_FF           0x15  
    #define EV_PWR          0x16  
    #define EV_FF_STATUS        0x17  
    #define EV_MAX          0x1f  
    #define EV_CNT          (EV_MAX+1)  

问：如何注册？

答：使用input_register_device(struct input_dev *dev)函数来注册

问：此按键驱动的硬件操作包括哪些操作？

答：申请定时器、申请中断操作

驱动源码：hid-button.c
